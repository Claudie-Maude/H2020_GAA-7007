# Generer un histogramme
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.05, color="black")
# Test de normalité
shapiro.test(res$residus)
```
Le test de normalité de Shapiro-Wilk est reconnu comme étant assez sévère. Il s'avère pourtant au-dessus du seuil de signifiance de 0,05 (p-value de 0,644) de sorte que l'hypothèse nulle (selon laquelle la distribution serait normale) est acceptée. Les analyses graphiques utilisant la fonction "plot" et la fonction "qqPlot" du package "car" corroborent la normalité des résidus. Toutefois, les analyses graphiques des résidus utilisant la fonction "ggplot" (distribution des résidus selon les variables explicatives et selon un histogramme) montrent que ceux-ci ne sont pas parfaitement distribués selon une loi normale. En effet, les résidus ne sont pas tout à fait distribués de façon éparse et égale de part et d'autre de la droite y=0, sauf pour la variable explicative de la hauteur. De plus, l'histogramme montre que les résidus sont plus abondants et mieux répartis pour des valeurs négatives de résidus (entre 0 et -0,2), alors qu'ils sont moins abondants et moins bien répartis pour des valeurs positives de résidus (entre 0 et 0,3). Or, bien qu'ils semble plus abondants aux alentours de 0, ils ne sont pas répartis de façon parfaitement équilibrée de part et d'autre de la valeur 0 pour l'axe des résidus.
Bref, il serait intéressant de réaliser d'autres prétraitements (transformation) ou de considérer l'interaction entre les deux variables explicatives (circonférence et hauteur) dans la régression linéaire. Il faut également dire que l'échantillonnage actuel est restreint pour ce type de test, ce qui peut contribuer à ces "anomalies". Une étude plus détaillée des données aberrantes serait aussi une option envisageable, malgré le nombre restreint d'échantillons. Néanmoins, il demeure que je crois pouvoir considérer que la distribution actuelle est relativement normale.
library("tidyverse")
library("measurements")
library("rmarkdown")
library("car")
cherry <- read.csv("Tableau/cherry.csv") # Importer le tableau cherry
cherry # Visualiser le tableau importé
str(cherry) #Regarder le type des vecteurs
dim(cherry) #Valider rapidement les dimensons
summary(cherry) #Valider la cohérence des donnees importées
plot(cherry) #visualiser sous forme de graphique
setwd("F:/Maitrise/StatistiqueCours/Livrable2")
setwd("F:/Maitrise/StatistiqueCours/Livrable2")
library("tidyverse")
library("measurements")
library("rmarkdown")
library("car")
cherry <- read.csv("Tableau/cherry.csv") # Importer le tableau cherry
cherry # Visualiser le tableau importé
str(cherry) #Regarder le type des vecteurs
dim(cherry) #Valider rapidement les dimensons
summary(cherry) #Valider la cohérence des donnees importées
plot(cherry) #visualiser sous forme de graphique
#Convertir les unités dans le tableau
girth <- conv_unit(cherry$Girth,"inch","cm")
height <- conv_unit(cherry$Height,"ft","m")
volume <- conv_unit(cherry$Volume,"ft3","m3")
cherry_meter <- data.frame(girth, height, volume) #Recomposer le tableau
cherry_meter #visualiser le tableau créé
str(cherry_meter) #Regarder le type des vecteurs
dim(cherry_meter) #Valider rapidement les dimensons
``
plot(cherry_meter) #visualiser rapidement l'ensemble des données sous forme de graphique
#Visualiser plus précisément sous forme de graphique
X <- cherry_meter$height
Y <- cherry_meter$girth
ggplot(aes(x=X, y=Y), data=cherry_meter)+
geom_point()+
geom_smooth(method = "lm", color="chocolate", se=TRUE, formula = y~x)
library("tidyverse")
library("measurements")
library("rmarkdown")
library("car")
library("ggplot2"")
plot(cherry_meter) #visualiser rapidement l'ensemble des données sous forme de graphique
#Visualiser plus précisément sous forme de graphique
X <- cherry_meter$height
Y <- cherry_meter$girth
ggplot(aes(x=X, y=Y), data=cherry_meter)+
geom_point()+
geom_smooth(method = "lm", color="chocolate", se=TRUE, formula = y~x)
X <- cherry_meter$height
Y <- cherry_meter$girth
ggplot(aes(x=X, y=Y), data=cherry_meter)+
geom_point()+
geom_smooth(method = "lm", color="chocolate", se=TRUE, formula = y~x)
plot(cherry_meter)
X <- cherry_meter$height
Y <- cherry_meter$girth
ggplot(aes(x=X, y=Y), data=cherry_meter)+
geom_point()+
geom_smooth(method = "lm", color="chocolate", se=TRUE, formula = y~x)
ggplot(aes(x=X, y=Y), data=cherry_meter)+
geom_point()
library("ggplot2", lib.loc="~/R/win-library/3.6")
library("ggplot2")
X <- cherry_meter$height
Y <- cherry_meter$girth
ggplot(aes(x=X, y=Y), data=cherry_meter)+
geom_point()+
geom_smooth(method = "lm", color="chocolate", se=TRUE, formula = y~x)
X <- cherry_meter$height #Changer les variables au besoin
Y <- cherry_meter$volume
ggplot(aes(x=X, y=Y), data=cherry_meter)+
geom_point()+
geom_smooth(method = "lm", color="chocolate", se=TRUE, formula = y~x)
matrice.corr <- cor(cherry_meter) # Générer une matrice de corrélation
matrice.corr #Voir le résultat de la matrice de corrélation
lm1<- lm(volume ~ height + girth, data=cherry_meter)
summary(lm1)
#Validation réalisée avec la standardisation
#Création d'un tableau avec les valeurs standardisées
cherry_meter_sc<- cherry_meter %>%
mutate_all(scale)
cherry_meter_sc #visualiser
lm2<- lm(volume ~ height + girth, data=cherry_meter_sc)
summary(lm2) # Régression et visualisation du sommaire qui est identique à celui avec les données non standardisées
plot(resid(lm1), fitted(lm1)) #Graphique Normal Q-Q montrant la distribution des résidus selon une bissectrice
qqPlot(lm1) #Graphique montrant la normalité selon une bissectrice et l'«intervalle de normalité»
residus<- residuals(lm1) #Déterminer les résidus de ma régression
res<- cherry_meter_sc %>% # Recréer le tableau contenant les résidus calculés
select(girth, height, volume) %>%
data.frame(girth,
volume,
height,
residus=residuals(lm1))
res # visualiser le tableau
#Générer un graphique de résidus
Z <- girth+height # Changer pour vérifier la distribution des résidus selon d'autres variables explicatives
ggplot(res, aes(x = Z, y=residus ))+
geom_point()+
geom_hline(yintercept=0, col="red")
# Generer un histogramme
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.05, color="black")
# Test de normalité
shapiro.test(res$residus)
res<- cherry_meter_sc %>% # Recréer le tableau contenant les résidus calculés
select(girth, height, volume) %>%
data.frame(girth,
volume,
height,
residus=residuals(lm1))
res<- cherry_meter_sc %<% # Recréer le tableau contenant les résidus calculés
select(girth, height, volume) %>%
data.frame(girth,
volume,
height,
residus=residuals(lm1))
library("tidyverse")
library("tidyverse", lib.loc="~/R/win-library/3.6")
library("tidyverse")
install.packages("assertthat")
library("assertthat")
library("tidyverse")
library("measurements")
library("rmarkdown")
library("car")
library("ggplot2")
install.packages("car")
install.packages("tidyverse")
library("tidyverse")
library("measurements")
library("rmarkdown")
library("car")
library("ggplot2")
X <- cherry_meter$height #Changer les variables au besoin
Y <- cherry_meter$volume
ggplot(aes(x=X, y=Y), data=cherry_meter)+
geom_point()+
geom_smooth(method = "lm", color="chocolate", se=TRUE, formula = y~x)
res<- cherry_meter_sc %>% # Recréer le tableau contenant les résidus calculés
select(girth, height, volume) %>%
data.frame(girth,
volume,
height,
residus=residuals(lm1))
res<- cherry_meter_sc %>% # Recréer le tableau contenant les résidus calculés
select(girth, height, volume) %>%
data.frame(girth,
volume,
height,
residus=residuals(lm1))
library("dplyr")
res<- cherry_meter_sc %>% # Recréer le tableau contenant les résidus calculés
select(girth, height, volume) %>%
data.frame(girth,
volume,
height,
residus=residuals(lm1))
res<- cherry_meter %>% # Recréer le tableau contenant les résidus calculés
select(girth, height, volume) %>%
data.frame(girth,
volume,
height,
residus=residuals(lm1))
res
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library("tidyverse"")
library("tidyverse")
library("tidyverse")
library("tidyverse")
library("tidyverse")
library("tidyverse")
library("tidyverse")
library("tidyverse")
library("tidyverse", lib.loc="~/R/win-library/3.6")
res<- cherry_meter %>% # Recréer le tableau contenant les résidus calculés
select(girth, height, volume) %>%
data.frame(girth,
volume,
height,
residus=residuals(lm1))
res
Z <- girth+height # Changer pour vérifier la distribution des résidus selon d'autres variables explicatives
ggplot(res, aes(x = Z, y=residus ))+
geom_point()+
geom_hline(yintercept=0, col="red")
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.05, color="black")
shapiro.test(res$residus)
residus<- residuals(lm1)
res<- cherry_meter %>% # Recréer le tableau contenant les résidus calculés
data.frame(girth,
volume,
height,
residus=residuals(lm1))
res
residus<- residuals(lm1)
residus
plot(resid(lm1), fitted(lm1))
plot(resid(lm1), fitted(lm1))
plot(resid(lm1), fitted(lm1))
plot(resid(lm1), fitted(lm1))
plot(resid(lm1), fitted(lm1))
qqPlot(lm1)
res<- cherry_meter %>% # Recréer le tableau contenant les résidus calculés
data.frame(girth,
volume,
height,
residus=residuals(lm1))#Permet de déterminer les résidus de ma régression
res
Z <- girth+height # Changer pour vérifier la distribution des résidus selon d'autres variables explicatives
ggplot(res, aes(x = Z, y=residus ))+
geom_point()+
geom_hline(yintercept=0, col="red")
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.05, color="black")
qqplot(resid(lm1), fitted(lm1))
qqnorm(resid(lm1), fitted(lm1))
qqplot(resid(lm1), fitted(lm1))
qqPlot(lm1)
qqnorm(lm1)
qqplot(lm1)
qqplot(volume$cherry_meter)
qqplot(volume, data=cherry_meter)
qqplot(lm1)
qqplot(resid(lm1), fitted(lm1))
qqplot(resid(lm1), fitted(lm1))
qqplot(resid(lm1), fitted(lm1))
qqPlot(lm1) #Graphique montrant la normalité selon une bissectrice et l'«intervalle de normalité»
res<- cherry_meter %>% # Recréer le tableau contenant les résidus calculés
data.frame(girth,
volume,
height,
residus=residuals(lm1))#Permet de déterminer les résidus de ma régression
Z <- girth+height # Changer pour vérifier la distribution des résidus selon d'autres variables explicatives
ggplot(res, aes(x = Z, y= residus ))+
geom_point()+
geom_hline(yintercept=0, col="red")
Z <- volume # Changer pour vérifier la distribution des résidus selon d'autres variables explicatives
ggplot(res, aes(x = Z, y= residus ))+
geom_point()+
geom_hline(yintercept=0, col="red")
Z <- height + girth # Changer pour vérifier la distribution des résidus selon d'autres variables explicatives
ggplot(res, aes(x = Z, y= residus ))+
geom_point()+
geom_hline(yintercept=0, col="red")
# Générer un histogramme
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.05, color="black")
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.1, color="black")
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.05, color="black")
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.025, color="black")
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.05, color="black")
library("tidyverse")
library("measurements")
library("rmarkdown")
library("car")
cherry <- read.csv("Tableau/cherry.csv") # Importer le tableau cherry
cherry # Visualiser le tableau importé
str(cherry) #Regarder le type des vecteurs
dim(cherry) #Valider rapidement les dimensons
summary(cherry) #Valider la cohérence des donnees importées
plot(cherry) #visualiser sous forme de graphique
cherry <- read.csv("Tableau/cherry.csv") # Importer le tableau cherry
cherry # Visualiser le tableau importé
str(cherry) #Regarder le type des vecteurs
dim(cherry) #Valider rapidement les dimensons
summary(cherry) #Valider la cohérence des donnees importées
plot(cherry) #visualiser sous forme de graphique
conv_unit_options #Voir les noms d'unités a utiliser afin de bien les écrire
#Convertir les unités dans le tableau
girth <- conv_unit(cherry$Girth,"inch","cm")
height <- conv_unit(cherry$Height,"ft","m")
volume <- conv_unit(cherry$Volume,"ft3","m3")
cherry_meter <- data.frame(girth, height, volume) #Recomposer le tableau
cherry_meter #visualiser le tableau créé
str(cherry_meter) #Regarder le type des vecteurs
dim(cherry_meter) #Valider rapidement les dimensons
plot(cherry_meter) #visualiser rapidement l'ensemble des données sous forme de
X <- cherry_meter$height #Changer les variables au besoin
Y <- cherry_meter$volume
ggplot(aes(x=X, y=Y), data=cherry_meter)+
geom_point()+
geom_smooth(method = "lm", color="chocolate", se=TRUE, formula = y~x)
ggplot(aes(x=X, y=Y), data=cherry_meter)+
geom_point()+
geom_smooth(method = "lm", color="chocolate", se=TRUE, formula = y~x)
```
library("ggplot2")
#Visualiser plus précisément sous forme de graphique
X <- cherry_meter$height #Changer les variables au besoin
Y <- cherry_meter$volume
ggplot(aes(x=X, y=Y), data=cherry_meter)+
geom_point()+
geom_smooth(method = "lm", color="chocolate", se=TRUE, formula = y~x)
matrice.corr <- cor(cherry_meter) # Générer une matrice de corrélation
matrice.corr #Voir le résultat de la matrice de corrélation
lm1<- lm(volume ~ height + girth, data=cherry_meter)
summary(lm1)
Validation réalisée avec la standardisation
#Création d'un tableau avec les valeurs standardisées
cherry_meter_sc<- cherry_meter %>%
mutate_all(scale)
cherry_meter_sc #visualiser
lm2<- lm(volume ~ height + girth, data=cherry_meter_sc)
summary(lm2) # Régression et visualisation du sommaire qui est identique à celui avec les données non standardisées
cherry_meter_sc<- cherry_meter %>%
mutate_all(scale)
cherry_meter_sc #visualiser
lbrary("dplyr")
library("dplyr")
cherry_meter_sc<- cherry_meter %>%
mutate_all(scale)
cherry_meter_sc #visualiser
lm2<- lm(volume ~ height + girth, data=cherry_meter_sc)
summary(lm2) # Régression et visualisation du sommaire qui est identique à celui avec les données non standardisées
qqplot(resid(lm1), fitted(lm1)) #Graphique Normal Q-Q montrant la distribution des résidus selon une bissectrice
qqPlot(lm1) #Graphique montrant la normalité selon une bissectrice et l'«intervalle de normalité»
res<- cherry_meter %>% # Recréer le tableau contenant les résidus calculés
data.frame(girth,
volume,
height,
residus=residuals(lm1))#Permet de déterminer les résidus de ma régression
res # visualiser le tableau
#Générer un graphique de résidus
Z <- height + girth # Changer pour vérifier la distribution des résidus selon d'autres variables explicatives
ggplot(res, aes(x = Z, y= residus ))+
geom_point()+
geom_hline(yintercept=0, col="red")
# Générer un histogramme
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.05, color="black")
# Test de normalité
shapiro.test(res$residus)
qqplot(resid(lm1), fitted(lm1)) #Graphique Normal Q-Q montrant la distribution des résidus selon une bissectrice
qqPlot(lm1) #Graphique montrant la normalité selon une bissectrice et l'«intervalle de normalité»
res<- cherry_meter %>% # Recréer le tableau contenant les résidus calculés
data.frame(girth,
volume,
height,
residus=residuals(lm1))#Permet de déterminer les résidus de ma régression
res # visualiser le tableau
Z <- height + girth # Changer pour vérifier la distribution des résidus selon d'autres variables explicatives
ggplot(res, aes(x = Z, y= residus ))+
geom_point()+
geom_hline(yintercept=0, col="red")
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.05, color="black")
# Test de normalité
shapiro.test(res$residus)
install.packages("tidyverse")
library("tidyverse")
install.packages("backports")
library("tidyverse")
library("tidyverse")
library("measurements")
library("rmarkdown")
library("car")
cherry <- read.csv("Tableau/cherry.csv") # Importer le tableau cherry
cherry # Visualiser le tableau importé
str(cherry) #Regarder le type des vecteurs
dim(cherry) #Valider rapidement les dimensons
summary(cherry) #Valider la cohérence des donnees importées
plot(cherry) #visualiser sous forme de graphique
conv_unit_options #Voir les noms d'unités a utiliser afin de bien les écrire
#Convertir les unités dans le tableau
girth <- conv_unit(cherry$Girth,"inch","cm")
height <- conv_unit(cherry$Height,"ft","m")
volume <- conv_unit(cherry$Volume,"ft3","m3")
cherry_meter <- data.frame(girth, height, volume) #Recomposer le tableau
cherry_meter #visualiser le tableau créé
str(cherry_meter) #Regarder le type des vecteurs
dim(cherry_meter) #Valider rapidement les dimensons
plot(cherry_meter) #visualiser rapidement l'ensemble des données sous forme de graphique
#Visualiser plus précisément sous forme de graphique
X <- cherry_meter$height #Changer les variables au besoin
Y <- cherry_meter$volume
ggplot(aes(x=X, y=Y), data=cherry_meter)+
geom_point()+
geom_smooth(method = "lm", color="chocolate", se=TRUE, formula = y~x)
Il semble y avoir une corrélation positive entre le volume, la circonférence et la hauteur. Les variables semblent reliées entre elles, ce qui est logique, puisque ces trois variables sont des mesures de la croissance d'un même arbre. Le volume semble croitre de façon proportionnelle à la hauteur et à la circonférence. En effet, la distribution des points semble tendre vers des régressions linéaires croissantes. Les données de volume en fonction de la circonférence présentent la plus forte corrélation (0,967). Sur le graphique, les points sont moins dispersés et plus concentrés le long de la droite de régression. Les graphiques montrant le volume par rapport à la hauteur présentent une corrélation plus faible (0,598). Sur le graphique, les points sont davantage dispersés. De plus, la hauteur et la circonférence sont encore moins corrélées entre elles (0,519), de sorte que les points sont plus diffus sur le graphique. Il demeure que cette relation entre la hauteur et la circonférence n'est pas négligeable et montre clairement un lien entre ces deux variables. Après cette analyse, réaliser une régression linéaire semble une bonne option pour analyser ces données.
matrice.corr <- cor(cherry_meter) # Générer une matrice de corrélation
matrice.corr #Voir le résultat de la matrice de corrélation
lm1<- lm(volume ~ height + girth, data=cherry_meter)
summary(lm1)
#Validation réalisée avec la standardisation
#Création d'un tableau avec les valeurs standardisées
cherry_meter_sc<- cherry_meter %>%
mutate_all(scale)
cherry_meter_sc #visualiser
lm2<- lm(volume ~ height + girth, data=cherry_meter_sc)
summary(lm2) # Régression et visualisation du sommaire qui est identique à celui avec les données non standardisées
qqPlot(lm1) #Graphique montrant la normalité selon une bissectrice et l'«intervalle de normalité»
res<- cherry_meter %>% # Recréer le tableau contenant les résidus calculés
data.frame(girth,
volume,
height,
residus=residuals(lm1))#Permet de déterminer les résidus de ma régression
res # visualiser le tableau
#Générer un graphique de résidus
Z <- height + girth # Changer pour vérifier la distribution des résidus selon d'autres variables explicatives
ggplot(res, aes(x = Z, y= residus ))+
geom_point()+
geom_hline(yintercept=0, col="red")
# Générer un histogramme
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.05, color="black")
# Test de normalité
shapiro.test(res$residus)
res<- cherry_meter %>% # Recréer le tableau contenant les résidus calculés
data.frame(girth,
volume,
height,
residus=residuals(lm1))#Permet de déterminer les résidus de ma régression
res # visualiser le tableau
qqPlot(lm1) #Graphique montrant la normalité selon une bissectrice et l'«intervalle de normalité»
Z <- height + girth # Changer pour vérifier la distribution des résidus selon d'autres variables explicatives
ggplot(res, aes(x = Z, y= residus ))+
geom_point()+
geom_hline(yintercept=0, col="red")
# Générer un histogramme
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.05, color="black")
# Test de normalité
shapiro.test(res$residus)
library("tidyverse")
library("measurements")
library("rmarkdown")
library("car")
cherry <- read.csv("Tableau/cherry.csv") # Importer le tableau cherry
cherry # Visualiser le tableau importé
str(cherry) #Regarder le type des vecteurs
dim(cherry) #Valider rapidement les dimensons
summary(cherry) #Valider la cohérence des donnees importées
plot(cherry) #visualiser sous forme de graphique
conv_unit_options #Voir les noms d'unités a utiliser afin de bien les écrire
#Convertir les unités dans le tableau
girth <- conv_unit(cherry$Girth,"inch","cm")
height <- conv_unit(cherry$Height,"ft","m")
volume <- conv_unit(cherry$Volume,"ft3","m3")
cherry_meter <- data.frame(girth, height, volume) #Recomposer le tableau
cherry_meter #visualiser le tableau créé
str(cherry_meter) #Regarder le type des vecteurs
dim(cherry_meter) #Valider rapidement les dimensons
plot(cherry_meter) #visualiser rapidement l'ensemble des données sous forme de graphique
#Visualiser plus précisément sous forme de graphique
X <- cherry_meter$height #Changer les variables au besoin
Y <- cherry_meter$volume
ggplot(aes(x=X, y=Y), data=cherry_meter)+
geom_point()+
geom_smooth(method = "lm", color="chocolate", se=TRUE, formula = y~x)
matrice.corr <- cor(cherry_meter) # Générer une matrice de corrélation
matrice.corr #Voir le résultat de la matrice de corrélation
lm1<- lm(volume ~ height + girth, data=cherry_meter)
summary(lm1)
#Validation réalisée avec la standardisation
#Création d'un tableau avec les valeurs standardisées
cherry_meter_sc<- cherry_meter %>%
mutate_all(scale)
cherry_meter_sc #visualiser
lm2<- lm(volume ~ height + girth, data=cherry_meter_sc)
summary(lm2) # Régression et visualisation du sommaire qui est identique à celui avec les données non standardisées
qqPlot(lm1) #Graphique montrant la normalité selon une bissectrice et l'«intervalle de normalité»
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.05, color="black")
res<- cherry_meter %>% #
data.frame(girth,
volume,
height,
residus=residuals(lm1), #Résidus
fitted = predict(lm1))#Variable prédite
res # visualiser le tableau
Z <- height + girth # Changer pour vérifier la distribution des résidus selon d'autres variables explicatives
ggplot(res, aes(x = Z, y= residus ))+
geom_point()+
geom_hline(yintercept=0, col="red")
#Générer un graphique des résidus (Y) en fonction de la variable prédite (Y)
ggplot(res, aes(x = fitted, y= residus ))+
geom_point()+
geom_hline(yintercept=0, col="red")
# Générer un histogramme
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.05, color="black")
# Test de normalité
shapiro.test(res$residus)
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.05, color="black")
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.1, color="black")
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.05, color="black")
ggplot(res, aes(x = fitted, y= residus ))+
geom_point()+
geom_hline(yintercept=0, col="red")
# Générer un histogramme du compte des résidus (X) selon leur valeur (Y)
ggplot(res, aes(x = residus))+
geom_histogram(aes(fill="pink"),binwidth = 0.05, color="black")
